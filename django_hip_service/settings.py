"""
Django settings for django_hip_service project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import subprocess
import time

from django import get_version
import os
from pathlib import Path

from import_export.formats import base_formats

# 应用版本号
VERSION = (1, 0, 1, "alpha", 3)
__version__ = get_version(VERSION)
APP_COMMIT_HASH = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()[:8]
APP_BRANCH = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).decode()
APP_ENV = '生产环境' if int(os.environ.get("DEBUG", default=0)) else '非生产环境'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-f7&l8h*wd@arejo#9%4nqg*s_hbzf1a-(%&*+6_*mj4lv2*eum')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost").split(",")

# Application definition
# APPS
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.admindocs",  # 供生成文档使用
    "django.contrib.sites", # 站点使用
]

THIRD_PARTY_APPS = [
    'rest_framework',  # 提供api接口专用
    'import_export',  # 后台管理导入导出功能; 参考链接: https://django-import-export.readthedocs.io/en/latest/index.html
]

LOCAL_APPS = [
    "esb_standard",
    # Your stuff: custom apps go here
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.contrib.admindocs.middleware.XViewMiddleware",  # 供生成文档标签使用
]

ROOT_URLCONF = 'django_hip_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_hip_service.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# 静态方式 (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = os.getenv("STATIC_URL", 'static/')

# Default primary key field type
# https://docs.djangoproject.com/zh-hans/5.0/howto/static-files/
# python manage.py collectstatic 收集文件到下面文件文件夹里
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# 多媒体文件
MEDIA_URL = os.getenv("MEDIA_URL", 'media/')
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

IMPORT_EXPORT_USE_TRANSACTIONS = True
IMPORT_EXPORT_FORMATS = [base_formats.XLS, base_formats.XLSX, base_formats.CSV]

# ######################### 日志配置开始 ######################### #
# 参考链接: https://www.jb51.net/article/260114.htm

BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime:<19}|{levelname:<10}|{process:d}:{thread:d}:{module}:{funcName}:{lineno}|{message}',
            'style': '{',
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        'simple': {
            'format': '{asctime:<19}|{levelname:<10}|{message}',
            'style': '{',
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "default": {
            "format": '{asctime:<19}|{name}|{levelname:<10}|{pathname}:{lineno}|{module}:{funcName}|{message}',
            'style': '{',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': logging.INFO,
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'file': {
            'level': logging.INFO,
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-debug.log"),
            'filters': ['require_debug_true', ],
            "when": 'D',  # 时间单位： M, H, D， W0(周一), W6(周日)
            "interval": 1,
            "backupCount": 7,  # 备份数量
            "formatter": "verbose",  # 日志格式
            "encoding": "utf-8"
        },
        "request": {
            'level': logging.DEBUG,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-request.log"),
            'filters': ['require_debug_true', "require_debug_false"],
            'formatter': 'default'
        },
        "server": {
            'level': logging.DEBUG,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-server.log"),
            'filters': ['require_debug_true', ],
            'formatter': 'default'
        },
        "root": {
            'level': logging.DEBUG,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-root.log"),
            'filters': ['require_debug_true', ],
            'formatter': 'default'
        },
        "db_backends": {
            'level': logging.DEBUG,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-db_backends.log"),
            'filters': ['require_debug_true', ],
            'formatter': 'default'
        },
        "autoreload": {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, f"logs/{time.strftime('%Y-%m-%d')}-autoreload.log"),
            'formatter': 'default'
        },
        # 电子邮件发给管理员
        "mail_admins": {
            "level": logging.ERROR,
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],
        }
    },
    'loggers': {
        # 应用中自定义日志记录器
        'mylogger': {
            'level': os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            'handlers': ['console', 'file'],
            'propagate': True,
        },
        "django": {
            "level": os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            "handlers": ["console", "file"],
            'propagate': False,
        },
        "django.request": {
            "level": os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            "handlers": ["request", "console"],
            'propagate': False,
        },
        "django.server": {
            "level": os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            "handlers": ["server"],
            'propagate': False,
        },
        "django.db.backends": {
            "level": os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            "handlers": ["db_backends"],
            'propagate': False,
        },
        "django.utils.autoreload": {
            "level": os.getenv("DJANGO_LOG_LEVEL", logging.DEBUG),
            "handlers": ["autoreload"],
            'propagate': False,
        }
    }
}
# e.g. logger = logging.getLogger("mylogger")
# ######################### 日志配置结束 ######################### #


SITE_ID = os.getenv('AP_SITE_ID', 2024)